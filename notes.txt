         BACKEND FOR BANK APP
    --------------------------------

1. Create a server folder  - bankapp-backend 
2. Create a package.json file - npm init
3. Install express - npm i express
4. Create index.js file
5. Using express create server application - const server = express()
6. Setup port number - server.listen(5000,()=>{})
7. Install cors - npm i cors
8. Cors - Cross-Origin Resource Sharing 
      It is an HTTP-header based mechanism implemented by the browser which allows a server or
      an API(Application Programming Interface) to indicate any origins (different in terms of protocol, hostname, or port)
      other than its origin from which the unknown origin gets permission to access and load resources.
      The cors package available in the npm registry is used to tackle CORS errors in a Node.js application. 
9. Use cors in server application
10. Resolve the API Requests

11.What is JWT (JSON Web Token)?
   JWT refers to JSON Web token. 
   It’s a token in string form validated and generated by a web server. 
   This string-based token helps in communicating between the client and the server.
   -> Installation = npm i jsonwebtoken
   ->generate token - sign()
   ->using jwt token ,generate token for user who logined successful
   ->import jwt token in to logic.js file.

 12. Middlewire 
   ->Middleware Node.JS is a function that plays a vital role in the request-response lifecycle of Node.JS execution. 
   Using middleware functions, you can run any code and easily change response and request objects.
   Not only that, you can end the request-response lifecycle if you want and run the following middleware function using the next function. 
   This blog delves deep into middleware, its importance, middleware in Node.JS, its types, and many others.

   ->What is the Next ( ) Function?
   The next ( ) function plays a vital role in applications' request and response cycle. 
   It is a middleware function that runs the next middleware function once it is invoked. 
   In other words, the Next function is invoked if the current middleware function doesn’t end the request and response cycle. 
   It is essential to note that no middleware function should be hanging in the queue.



13. Node.js
    Know that all APIs of Node.JS are asynchronous. In other words, they are non-blocking APIs. 
    Node.JS is an asynchronous event-driven runtime environment with which you can develop scalable network applications.

   Node.JS uses a single-threaded model, but at the same time, they are highly scalable.
   What’s more! They don't buffer any data, but they release data in chunks.

14.Types of Node.JS Middleware
      There are five types of middleware as follows

      i)Application-level Middleware
       application-level middleware focuses on authenticating users. 
       Once the authentication request is received, the authentication middleware invokes authentication code logic.
       If the authentication is successful, the rest of the route is progressed with the help of the next function
       On the other hand, if the authentication is unsuccessful, there is no progress in the route, and the middleware releases error messages.

      ii)Router-level Middleware
         This middleware works in the same way application-level middleware works. 
         By using the express. router ( ) function, this middleware supports creating and managing instances. 
         Moreover, you can load router-level middleware with the help of the router.use ( ) function as well as router.METHOD ( ) function.

      iii)
